<pre class='metadata'>
Title: PACT Initiative Developer Documentation
Shortname: pact-dev-docs
Level: 1
Status: LD
URL: https://wbcsd.github.io/introduction/
Editor:
Mailing List: public-dev@pathfinder.sine.dev
Repository: sine-fnd/intro
Abstract: To reach net zero emissions before 2050, we need all business to measure, account for and disclose carbon emissions as a first step to reducing them.
 The PACT (Partnership for Carbon Transparency) Initative is cross-value chain initiative to define and accelerate credible, verified primary emission data exchange.
Markup Shorthands: markdown yes
Boilerplate: omit conformance, omit copyright
</pre>

# Introduction

## Our goal

TEMP:
Net zero emissions before 2050.
Scope 3 emissions' primary data, rather than estimates, etc.
Need interoperability.

## Pathfinder Framework

TEMP:
The Pathfinder Framework provides industry-agnostic methodological guidance for the calculation of product-level emissions data. It also defines which data elements are exchanged within value chains

Guidance for the Accounting and Exchange of Product Life Cycle Emissions, building on existing standards and protocols, such as the GHG Protocol Product standard). See the Pathfinder Framework Version 1 for details.

## Product Carbon Footprint (PCF)

The carbon (equivalent) emissions relating to a product. Products can be any kind of item exchanged between entities, including “pieces”, metric or volumetric quantities of a product, etc.

## Pathfinder Network

TEMP:
The Pathfinder Network is a data exchange infrastructure that enables organizations to connect across value chains and industries to share product carbon footprint data. The Network creates interoperability between technology solutions and industry-focused data exchange platforms, meaning organizations are flexible in their choice of provider. It can be seen as a sort of convener or facilitator. In the simplest of terms, we aim is to create the “internet for emissions data” – the common nexus for all organizations to connect seamlessly, exchange and derive insights from emissions data.

The Pathfinder Network is a concept developed by PACT and powered by the World Business Council for Sustainable Development (WBCSD). PACT is working toward the vision of an open and global network of interoperable solutions for the secure peer-to-peer exchange of accurate, primary and verified product emissions data – across all industries and value chains.
For further information, please refer to the PACT website www.carbon-transparency.com and the Pathfinder vision paper “Pathfinder Network: Enabling standardized emissions data exchange”.

An information network of and for supply chain actors to securely exchange environmental data with each other, with an initial focus on PCF data.

## What do I need to implement to exchange PCFs through the Pathfinder Network?

In order to exchange PCF data through the Pathfinder Network, you ought to provide a solution that abides to the Pathfinder technical specifications.
You can either refer to the technical sepcifications, or follow the instructions below.

# Example API - Plug and Play

The following is an example implementation of an HTTP REST API conforming to the Pathfinder [Technical Specifications](https://wbcsd.github.io/data-exchange-protocol/v2/#action-authenticate).

A demo online version of this API is available at [https://api.pathfinder.sine.dev](https://api.pathfinder.sine.dev) and will be used in all examples below.
If you want to run the example API locally, you can also do so, by cloning [this repository](https://github.com/wbcsd/pathfinder-use-case-001) and following the instructiong [provided here](https://github.com/wbcsd/pathfinder-use-case-001/tree/main/endpoint)

A Swager UI visualization is available [here](https://api.pathfinder.sine.dev/swagger-ui).

Bellow is a list of all endpoints provided by this example:

<ul>
    <li><code highlight='sh'>/2/auth/token</code> — implements [[#authenticate]]
    <li><code highlight='sh'>/2/footprints</code> — implements [[#listFootprints]]
    <li><code highlight='sh'>/2/footprints/{footprint-id}</code> — implements [[#getFootprint]]
    <li><code highlight='sh'>/2//events</code> — implements [[#events]]
    <li><code highlight='sh'>/openapi.json/</code> — OpenAPI description file
    <li><code highlight='sh'>/swagger-ui/</code> — Swagger UI visualization
</ul>


Endpoints from Use Case 001 Specification Version 1
/2/footprints implementing the ListFootprints action
/2/footprints/<footprint-id> implementing the GetFootprint action
/2/events implementing the Events action
/2/auth/token implementing Authenticate action
Additional endpoints are:
/openapi.json: OpenAPI description file which is automatically generated from the types defined in api_types.rs and endpoints defined in main.rs
Swagger UI: /swagger-ui/ if you fancy a visualization

## Authentication ## {#authenticate}

Authentication is made through the `Authenticate` action, in accordance with the OAuth2 Client Credentials Grant ([RFC6749 4.4](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4)).

The API exposes the `/2/auth/token` endpoint, to which a `POST` call must be made, with the following credentials:

The response to a successful call will be a `JSON` object with three fields: `access_token`, `token_type`, and `scope`.

<div class='def'>
: Action
:: `Authenticate`
: Endpoint
:: `/2/auth/token`
: HTTP request
:: `POST`
: Credentials
:: id: `hello`, secret: `pathfinder`
: Example request (cURL)
:: <pre highlight='sh'>
curl -X POST --user hello:pathfinder \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "grant_type=client_credentials"  https://api.pathfinder.sine.dev/2/auth/token
</pre>
: Example response
:: <pre highlight='json'>{
        "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImhlbGxvIn0.wZPjxQz1wI25fIe0Oz4w5Y2g8UD_dMz6Wd-Aegg8HMM",
        "token_type": "bearer",
        "scope": null
    }
    </pre>
</div>

If using Swagger, click the `Authorize` button on the top-right and then, in the modal, use `hello` as the `client_id` and `pathfinder` as the `client_secret`.
If using Postman, use `hello` as the username and `pathfinder` as the password.

This access token must be used in other calls to the API.

## Fetching Data


Fetching data from the example API can be made through two actions:

: [[#listFootprints]]
:: enumerates the `ProductFootprints` available to the authenticated user;
: [[#getFootprint]]
:: retrieves a single ProductFootprint given its unique ID.

### `ListFootprints` Action ### {#listFootprints}

The `ListFootprints` action provides the authenticated a list of the `ProductFootprints` available to them, throught the `/2/footprints` endpoint.

A `GET` request to this endpoint can be made wih two optional parameters: `limit`, which takes an integer, and `filter`, which takes a string.
If left blank, the response will display all `ProductFootprints` available to the user.

The response to a successful call will be a `JSON` object with one field: an array of `ProductFootprint` objects.

<div class='def'>
: Action
:: `ListFootprints`
: Endpoint
:: `/2/footprints`
: Options
:: `limit=<integer>`, `filter=<string>`
: HTTP request
:: `GET`
: Authorization
:: `Bearer`
: Example request (cURL)
:: <pre highlight="sh">
curl -X 'GET' \
  'https://api.pathfinder.sine.dev/2/footprints?limit=2&filter=carbon' \
  -H 'accept: application/json' \
  -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImhlbGxvIn0.wZPjxQz1wI25fIe0Oz4w5Y2g8UD_dMz6Wd-Aegg8HMM'
</pre>
: Example response
:: <pre highlight='json'>{
        "data":
            [
                {"id":"d9be4477-e351-45b3-acd9-e1da05e6f633",
                "specVersion":"1.0.0","version":0,
                "created":"2022-05-22T21:47:32Z",
                ...
                },
                {"id":"c3028ee9-d595-4779-a73a-290bfa7505d6",
                "specVersion":"1.0.0","version":0,
                "created":"2022-05-22T21:47:32Z",
                ...
                }
            ]
    }
    </pre>
    <p class='note'>Note: The actual response contains an array of `ProductFootprint`s which are omitted for brevity here.
    See [[#getFootprint]] for a complete `ProductFootprint`.
</p>
</div>

### `GetFootprint` Action ### {#getFootprint}

The `GetFootprint` action provides the authenticated user a specific `ProductFootprint`, identified by its unique `id`.
Typically this is performed to get the latest version of that `ProductFootprint`.
A `GET` call has to be made to the `/2/footprints/<footprint-id>` endpoint.

The response to a successful call will be a `JSON` object with one field: an array with one `ProductFootprint` object.

<div class='def'>
: Action
:: `GetFootprint`
: Endpoint
:: `/2/footprints/<footprint-id>`
: HTTP request
:: `GET`
: Authorization
:: `Bearer`
: Example request (cURL)
:: <pre highlight="sh">
curl -X 'GET' \
  'https://api.pathfinder.sine.dev/2/footprints/d9be4477-e351-45b3-acd9-e1da05e6f633' \
  -H 'accept: application/json' \
  -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImhlbGxvIn0.wZPjxQz1wI25fIe0Oz4w5Y2g8UD_dMz6Wd-Aegg8HMM'
</pre>
: Example response
:: <pre highlight='json'>{
        "data": {
            "id": "d9be4477-e351-45b3-acd9-e1da05e6f633",
            "specVersion": "1.0.0",
            "version": 0,
            "created": "2022-05-22T21:47:32Z",
            "companyName": "My Corp",
            "companyIds": [
                "urn:uuid:51131FB5-42A2-4267-A402-0ECFEFAD1619",
                "urn:epc:id:sgln:4063973.00000.8"
            ],
            "productDescription": "Cote'd Or Ethanol",
            "productIds": [
                "urn:gtin:4712345060507"
            ],
            "productCategoryCpc": "3342",
            "productNameCompany": "Green Ethanol",
            "comment": "",
            "pcf": {
                "declaredUnit": "liter",
                "unitaryProductAmount": "12.0",
                "fossilGhgEmissions": "0.123",
                "biogenicEmissions": {
                    "landUseEmissions": "0.001",
                    "otherEmissions": "0"
                },
                "biogenicCarbonContent": "0.0",
                "reportingPeriodStart": "2021-01-01T00:00:00Z",
                "reportingPeriodEnd": "2022-01-01T00:00:00Z",
                "geographyCountry": "FR",
                "primaryDataShare": 56.12,
                "emissionFactorSources": [
                    {
                        "name": "Ecoinvent",
                        "version":
                        "1.2.3"
                    }
                ],
                "boundaryProcessesDescription": "End-of-life included",
                "crossSectoralStandardsUsed": [
                    "GHG Protocol Product standard"
                ],
                "productOrSectorSpecificRules": [
                    {
                        "operator": "EPD International",
                        "ruleNames": [
                            "ABC 2021"
                        ]
                    }
                ]
            }
        }
    }
    </pre>
</div>


## Sending an event (”a Product Carbon Footprint was updated”) ## {#events}

While through the `ListFootprints` and `GetFootprint` actions the authenticated user requests data from the example API,
through the `Events` action the authenticated user notifies the example API about some update in data they (i.e., the user)
own. Hence, in what concerns this specific action, the example API plays the role of `Data Recipient` rather than that of `Data Owner`.

To notify the example API of an update in a certain PCF, the authenticated user must make a `POST` call to the `/2/events` endpoint,
sending a `PF Update Event` (https://wbcsd.github.io/data-exchange-protocol/v2/#pf-update-event) as its body.

The syntax of `PF Update Event` and its fields can be found [here](https://wbcsd.github.io/data-exchange-protocol/v2/#api-action-events-case-1)

The response to a successfull call to the `/2/events` endpoint will have the HTTP Status Code 200 and <strong>an empty body</strong>.

Note: This functionality is optional. See [[#optional]] for more details.
<div class='def'>
: Action
:: `ListFootprints`
: Endpoint
:: `/2/footprints`
: Options
:: `limit=<integer>`, `filter=<string>`
: HTTP request
:: `GET`
: Authorization
:: `Bearer`
: Example request (cURL)
:: <pre highlight="sh">
curl -X 'POST' \
  'https://api.pathfinder.sine.dev/2/events' \
  -H 'accept: */*' \
  -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImhlbGxvIn0.wZPjxQz1wI25fIe0Oz4w5Y2g8UD_dMz6Wd-Aegg8HMM' \
  -H 'Content-Type: application/json' \
  -d '{
            "specversion": "1.0.0",
            "id": "1234",
            "source":"http://localhost:3000",
            "time": "2023-04-12T14:27:58.535Z",
            "type": "org.wbcsd.pathfinder.ProductFootprint.Published.v1",
            "data": {
                "pfIds": [
                    "f4b1225a-bd44-4c8e-861d-079e4e1dfd69"
                ]
            }
        }'
</pre>
</div>

# Overview of the Technical Specification

The [Technical Specification](https://wbcsd.github.io/data-exchange-protocol/v2/#pf-properties) specifies a data model for GHG emission data at product level based on the Pathfinder Framework Version 2, and a protocol for interoperable exchange of GHG emission data at product level.

## Required (”must haves”) functionality for conformance

### `Authenticate`

#### Request syntax


### `ListFootprints`

### `GetFootprint`

## Optional (”nice to haves”) functionality ## {#optional}

### `Events`

A data owner CAN notify a data recipient about changes to 1 or more product footprints by sending a PF Update Event to the data recipient’s Action Events endpoint.

A data recipient upon receiving such an PF Update Event CAN retrieve the product footprints through the Action GetFootprint.

https://wbcsd.github.io/data-exchange-protocol/v2/#pf-update-event






#

# Appendix

## Example Payload

## Implementation Checklist (Mandatory Functionality)

## Implementation Checklist (Optional Functionality)
